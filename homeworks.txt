Домашнє завдання №1: Робота зі списками

1. Створити список з 3-4 елементів, вивести суму всіх його елементів
    (це можуть бути цифри, або рядки, головне щоб усе одного типу)
2. Створити список з 5-6 елементів, деякі з яких повторюються. Вивести суму унікальних значень.
3. Створити словник де є поле "зарплата". Перевизначити значення цього поля,
    щоб воно дорівнювало 1.5 від початкової зарплати.

------------------------------------------------------------------------------------------------
Домашнє завдання №2: Робота з класами

Preconditions:
 1. Створити клас Human, в якому визначити метод drink.
     При ініціалізації, приймати вік людини; створити поле класу favorite_drink зі значенням 'beer'.
 2. Створити клас Worker, віднаслідувавши його від Human, та додавши при ініціалізації зарплату.

Завдання:
1. Реалізувати метод drink, так щоб він виводив в консоль назву поточного класу
    та додавав до неї відповідну дію та напій;
   Якщо людині менше 18 років, заміняти улюблений напій на 'juice'

1.1. Використовуючи даний клас, зробити виклик який:
    а) Виведе в консоль улюблений напій людини
    б) Виведе в консоль всю фразу, наприклад "Human likes drink beer"
       якщо людині більше 18 років, та "Human likes drink juice" якщо ні.

2. Перевизначити в класі Worker улюблений напій таким чином,
    щоб коли зарплата людини більша за 1000, то він змінювався на 'whiskey'
   Вивести в консоль все так само як в першому завданні, але з урахуванням зарплати.

------------------------------------------------------------------------------------------------
Домашнє завдання №3: Робота з рядками (strings)

Preconditions:
Є рядок "Мені дуже подобається вивчати пайтон! Здається, це найлегша з потужних мов для вивчення"

Завдання:
1. Вивести в консоль довжину рядка (кількість символів)
2. Вивести в консоль довжину рядка (кількість слів)
3. Розбити рядок на список окремих слів та замінити в кожному слові усі голосні літери
    іншим символом, наприклад #;
4. Відновити рядок зі списку, зі вже заміненими словами.

------------------------------------------------------------------------------------------------
Домашнє завдання №4: Робота з виключеннями (exceptions)

1. Створити функцію, що приймає число з консолі (використати функцію input());
    Функція повинна обробити значення таким чином: використовуючи вбудовану функцію int(),
    спробувати конвертувати рядок в число (input() завжди повертає рядок).
    Якщо конвертувати не виходить, то вивести в консоль "Entered not valid data".

2. Створити функцію, що приймає 2 рядки;
    Якщо хоча б один рядок не виходить конвертувати в число, тоді робимо конкатенацію (з'єднуємо рядки),
    якщо ж обидва значення можна конвертувати в числа, то отримуємо їх суму.
    Результат друкуємо в консоль.

3. Створити функцію, що приймає значення з консолі. Якщо значення не можна привести до числа,
    тоді просимо користувача ввести інше значення, доки він не введе число. Згадуємо про цикл while.
   Коли користувач вводить число, дякуємо йому!

4. Створити ВЛАСНЕ виключення. Наприклад OnlyEvenError. Створити функцію check_digit(), яка приймає число.
    Якщо число не парне, то породжувати це своє виключення;
    Якщо парне, то повертати його (return)

5. Створити функцію, що буде приймати число як аргумент і викликАти в тілі функцію check_digit,
    в яку передавати це число.
   Якщо виникає помилка, то перехопити її, та збільшити вхідне число на 1;
   Якщо помилки не вникає, то помножити число на 2.
    Результат виводити в консоль.
    Також функція повинна надрукувати в консоль фразу "Я все одно завжди щось друкую".
   !!! Використовувати try-except-else-finally

------------------------------------------------------------------------------------------------
Домашнє завдання №5: Робота з файлами

Preconditions:
Створити такий/скопіювати цей словник:
test_dict = {
    'user1': {'gender': 'm',
              'firstname': 'Vasya',
              'lastname': 'Pupkin',
              'age': 20},
    'user2': {'gender': 'f',
              'firstname': 'Vasilisa',
              'lastname': 'Pupkina',
              'age': 21}}

Завдання XML:
    1. Збереження словника у форматі XML: Конвертуйте словник у формат XML та
        збережіть його у файл з розширенням ".xml".
    2. Читання XML-файлу: Відкрийте XML-файл та розпарсіть його, щоб отримати
        знову словник Python, такий самий як оригінал.
Завдання JSON:
    3. Збереження словника у форматі JSON: Конвертуйте словник у формат JSON та
        збережіть його у файл з розширенням ".json".
    4. Читання JSON-файлу: Відкрийте JSON-файл та завантажте його дані у Python як словник.
Завдання XML та JSON:
    5. Конвертація з XML до JSON: Завантажте XML-файл, розпарсіть його та конвертуйте
        у формат JSON. Потім збережіть в файл.

------------------------------------------------------------------------------------------------
Домашнє завдання №6: робота з pytest та фікстурами

Preconditions:
1. Створіть материнський пакунок в корені проекту, наприклад lecture_pytest
2. В цьому пакунку розташуйте файл для фікстур (contest.py)

Завдання:
1. У файлі contest.py, створити фікстуру яка НЕ буде виконуватись автоматично,
    але при виклику, буде ПЕРЕД тестом друкувати в консоль наступний текст:
    "global lecture_pytest fixture setup", а ПІСЛЯ тесту — "global lecture_pytest fixture teardown".
2. Створити в цьому пакунку тест, який надрукує в консоль текст "lecture_pytest test executed",
    в якому викликати створену в пункті 1 фікстуру
3. Створити вкладений пакунок, в якому також розмістити файл з фікстурами,
    в якому створтити фікстуру що автоматично ВИКОНУЄТЬСЯ.
   В цьому пакунку створити 2 тести: перший працює тільки зі своєю фікстурою
    (тією, що в цьому пакунку виконується автоматично), а другий тест — викликає обидві фікстури.
3. Бонусне завдання:
- Створити у вкладеному пакунку, в файлі для фікстур, ще одну фікстуру (що НЕ виконується автоматично),
    яка буде повертати тесту цифру, наприклад 5.
- Створтити тест, який використає усі три фікстури, при цьому перевірить
    що з третьої (бонусної) фікстури приходить якесь число (перевірити тип).

------------------------------------------------------------------------------------------------
Домашнє завдання №7: Selenium - робота з radio buttons

Preconditions:
1. Завдання виконувати на сторінці https://demoqa.com/radio-button

Завдання:
1. Зібрати назви усіх радіо-кнопок на сторінці
2. Клікнути на одну з увімкнених радіо-кнопку
3. Переконатись assert`ом що відповідна кнопка обрана (клікнута)
    - спосіб 1: під кнопками з'явилась текстова інформація що її обрано
    - спосіб 2: перевірити саму кнопку на is_selected()
    Використати обидва способи
4. Увімкнути за допомогою js кнопку No, обрати її і перконатись що вона обрана (тільки спосіб 2)
    * підказка: driver.execute_script
5. По кожній кнопці на сторінці (без хард-коду, циклом, користуючись інфою з п 1)
    зібрати наступну інформацію:
    - чи увімкнена кнопка
    - чи обрана (клікнута) кнопка
    Відповідну інформацію зберегти в словник вигляду:
    {'Yes': {'enabled': True, 'selected': False},
     'Impressive': {'enabled': True, 'selected': True}}

------------------------------------------------------------------------------------------------
Домашнє завдання №8: Selenium - робота з чекбоксами

Preconditions:
1. Завдання виконувати на сторінці https://demoqa.com/checkbox

Завдання:
1. Шляхом передавання списку вигляду ['Home', 'Documents', 'Office'] у відповідний метод
    частково розгорнути дерево чекбоксів, відповідно до назв папок переданих в списку
2. Шляхом передавання списку вигляду ['Public', 'Private'] у відповідний метод
    обрати чекбокси (поставити галочки) на відповідних пунктах
3. Перевірити в асерті (assert) що обрані саме ті пункти, назви яких передали в списку
    (public, private)

------------------------------------------------------------------------------------------------
Домашнє завдання №9: Selenium - робота з очікуваннями (waiters)

Preconditions:
1. Завдання виконувати на сторінці https://demoqa.com/dynamic-properties

Завдання:
1. Написати власний очікувач (custom waiter) для першої кнопки (Will enable 5 seconds)
    - дочекатися коли стан кнопки зміниться з disabled на enabled
    - переконатися assert`ом, що стан кнопки є enabled (Кнопка увімкнена)
2. Написати власний очікувач (custom waiter) для третьої кнопки (Visible after 5 seconds)
    - дочекатися коли кнопка з'явиться на сторінці (стане visible)
    - переконатися assert`ом, кнопка присутня на сторінці
3. Написати метод що буде використовувати вбудований в Selenium очікувач
    для другої кнопки (Color Change)
    - дочекатися зміни кольору кнопки (звернути увагу на атрибут class цієї кнопки)
    - переконатися assert`ом що кнопка змінила колір (з'явилась відповідна інформація в атрибуті class)

------------------------------------------------------------------------------------------------
Домашнє завдання №10: Selenium - робота з пагінатором

Preconditions:
1. Завдання виконувати на сторінці https://rozetka.com.ua/ua/notebooks/c80004/

Завдання:
1. Переконатись що на одній сторінці розташовано 60 товарів
2. Проскролити сторінку до пагінатора і переконатись що
   - активне посилання пагінатора зараз саме (тільки) на першому пункті
   - кнопка "назад" (та, що в пагінаторі зліва від сторінок) вимкнена,
     а кнопка "До наступної сторінки" (права) увімкнена
3. Натиснути праву кнопку в пагінаторі "До наступної сторінки" та переконатись в наступному:
   - товарів на сторінці -- 60
   - активна кнопка пагінатора -- 2
   - url сторінки закінчується на "page=2/"
